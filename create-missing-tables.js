// Script to create the missing database tables directly
require('dotenv').config();

const { createClient } = require('@supabase/supabase-js');

// Use the service role key for server-side operations
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || '';
const supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY || '';

if (!supabaseUrl || !supabaseServiceRoleKey) {
  console.error('Missing Supabase environment variables for setup');
  process.exit(1);
}

// Create a Supabase client with service role key for server-side operations
const supabaseAdmin = createClient(supabaseUrl, supabaseServiceRoleKey, {
  auth: {
    persistSession: false,
    autoRefreshToken: false,
    detectSessionInUrl: false,
  },
});

async function createMissingTables() {
  try {
    console.log('Creating missing database tables...');
    
    // Add role column to profiles table if it doesn't exist
    console.log('\n1. Adding role column to profiles table...');
    try {
      const { error: addColumnError } = await supabaseAdmin
        .from('profiles')
        .select('*')
        .limit(1);
      
      if (addColumnError) {
        console.log('   ‚ö†Ô∏è  Error accessing profiles table:', addColumnError.message);
      } else {
        // Try to add the role column
        const { error: alterError } = await supabaseAdmin
          .rpc('execute_sql', { 
            sql: `ALTER TABLE profiles ADD COLUMN IF NOT EXISTS role TEXT DEFAULT 'user';` 
          });
        
        if (alterError) {
          console.log('   ‚ö†Ô∏è  Error adding role column:', alterError.message);
          // Try alternative approach
          try {
            const { error: updateError } = await supabaseAdmin
              .from('profiles')
              .update({ role: 'user' })
              .neq('id', '00000000-0000-0000-0000-000000000000');
            
            if (updateError && !updateError.message.includes('column "role" does not exist')) {
              console.log('   ‚ö†Ô∏è  Error updating role column:', updateError.message);
            } else {
              console.log('   ‚úÖ Role column already exists or created successfully');
            }
          } catch (updateErr) {
            console.log('   ‚ö†Ô∏è  Error updating role column:', updateErr.message);
          }
        } else {
          console.log('   ‚úÖ Role column added successfully');
        }
      }
    } catch (err) {
      console.log('   ‚ö†Ô∏è  Error checking profiles table:', err.message);
    }
    
    // Create room_members table
    console.log('\n2. Creating room_members table...');
    try {
      const { error: createTableError } = await supabaseAdmin
        .rpc('execute_sql', { 
          sql: `
            CREATE TABLE IF NOT EXISTS room_members (
              id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
              room_id BIGINT REFERENCES rooms NOT NULL,
              user_id UUID REFERENCES auth.users NOT NULL,
              joined_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::TEXT, NOW()) NOT NULL,
              UNIQUE(room_id, user_id)
            );
          ` 
        });
      
      if (createTableError) {
        console.log('   ‚ö†Ô∏è  Error creating room_members table:', createTableError.message);
      } else {
        console.log('   ‚úÖ Room_members table created successfully');
      }
    } catch (err) {
      console.log('   ‚ö†Ô∏è  Error creating room_members table:', err.message);
    }
    
    // Add RLS policies for room_members table
    console.log('\n3. Adding RLS policies to room_members table...');
    try {
      const { error: rlsError } = await supabaseAdmin
        .rpc('execute_sql', { 
          sql: `
            -- Set up Row Level Security (RLS)
            ALTER TABLE room_members ENABLE ROW LEVEL SECURITY;
            
            -- Policies
            CREATE POLICY "Room members are viewable by everyone." ON room_members
              FOR SELECT USING (true);
              
            CREATE POLICY "Authenticated users can join rooms." ON room_members
              FOR INSERT WITH CHECK (auth.role() = 'authenticated');
              
            CREATE POLICY "Users can leave rooms they joined." ON room_members
              FOR DELETE USING (auth.uid() = user_id);
          ` 
        });
      
      if (rlsError) {
        console.log('   ‚ö†Ô∏è  Error adding RLS policies:', rlsError.message);
      } else {
        console.log('   ‚úÖ RLS policies added successfully');
      }
    } catch (err) {
      console.log('   ‚ö†Ô∏è  Error adding RLS policies:', err.message);
    }
    
    console.log('\nüìù Manual SQL commands if the above failed:');
    console.log('\n-- Add role column to profiles table');
    console.log('ALTER TABLE profiles ADD COLUMN IF NOT EXISTS role TEXT DEFAULT \'user\';');
    
    console.log('\n-- Create room_members table');
    console.log(`CREATE TABLE IF NOT EXISTS room_members (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  room_id BIGINT REFERENCES rooms NOT NULL,
  user_id UUID REFERENCES auth.users NOT NULL,
  joined_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::TEXT, NOW()) NOT NULL,
  UNIQUE(room_id, user_id)
);`);
    
    console.log('\n-- Set up Row Level Security (RLS)');
    console.log('ALTER TABLE room_members ENABLE ROW LEVEL SECURITY;');
    
    console.log('\n-- Policies');
    console.log(`CREATE POLICY "Room members are viewable by everyone." ON room_members
  FOR SELECT USING (true);
  
CREATE POLICY "Authenticated users can join rooms." ON room_members
  FOR INSERT WITH CHECK (auth.role() = 'authenticated');
  
CREATE POLICY "Users can leave rooms they joined." ON room_members
  FOR DELETE USING (auth.uid() = user_id);`);
    
    console.log('\n‚úÖ Database table creation process completed!');
    return { success: true };
  } catch (error) {
    console.error('Error creating database tables:', error);
    return { success: false, error: error.message };
  }
}

async function run() {
  console.log('Starting database table creation process...');
  
  try {
    const result = await createMissingTables();
    
    if (result.success) {
      console.log('\n‚úÖ Database table creation completed successfully!');
      console.log('You can now restart your application to use the updated schema.');
      process.exit(0);
    } else {
      console.error('‚ùå Database table creation failed:', result.error);
      process.exit(1);
    }
  } catch (error) {
    console.error('‚ùå Unexpected error during database table creation:', error);
    process.exit(1);
  }
}

run();