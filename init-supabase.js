// Script to initialize Supabase database with required tables
require('dotenv').config();

const { createClient } = require('@supabase/supabase-js');

// Get credentials from environment variables
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('Missing Supabase credentials in environment variables');
  console.error('Please set NEXT_PUBLIC_SUPABASE_URL and SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

// Create Supabase client with service role key (admin access)
const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function initDatabase() {
  console.log('Initializing Supabase database...');
  
  try {
    // Create profiles table
    console.log('Creating profiles table...');
    const { error: profilesError } = await supabase.rpc('exec_sql', {
      sql: `
        create table if not exists profiles (
          id uuid references auth.users on delete cascade not null,
          username text unique,
          display_name text,
          avatar_url text,
          created_at timestamptz default now(),
          primary key (id)
        );
        
        alter table profiles enable row level security;
        
        create policy "profiles_owner" on profiles
          for insert with check (auth.uid() = id);
          
        create policy "profiles_select" on profiles
          for select using (true);
          
        create policy "profiles_update" on profiles
          for update using (auth.uid() = id);
      `
    });
    
    if (profilesError) {
      console.error('Error creating profiles table:', profilesError);
    } else {
      console.log('✓ Profiles table created successfully');
    }
    
    // Create rooms table
    console.log('Creating rooms table...');
    const { error: roomsError } = await supabase.rpc('exec_sql', {
      sql: `
        create table if not exists rooms (
          id uuid default gen_random_uuid() primary key,
          name text not null,
          created_by uuid references profiles(id),
          created_at timestamptz default now()
        );
        
        alter table rooms enable row level security;
        
        create policy "rooms_select" on rooms 
          for select using (auth.role() = 'authenticated');
          
        create policy "rooms_insert" on rooms 
          for insert with check (auth.role() = 'authenticated');
          
        create policy "rooms_update" on rooms 
          for update using (auth.uid() = created_by);
          
        create policy "rooms_delete" on rooms 
          for delete using (auth.uid() = created_by);
      `
    });
    
    if (roomsError) {
      console.error('Error creating rooms table:', roomsError);
    } else {
      console.log('✓ Rooms table created successfully');
    }
    
    // Create messages table
    console.log('Creating messages table...');
    const { error: messagesError } = await supabase.rpc('exec_sql', {
      sql: `
        create table if not exists messages (
          id bigint generated by default as identity primary key,
          room_id uuid references rooms(id) on delete cascade,
          sender_id uuid references profiles(id),
          content text,
          created_at timestamptz default now()
        );
        
        alter table messages enable row level security;
        
        create policy "messages_select" on messages 
          for select using (auth.role() = 'authenticated');
          
        create policy "messages_insert" on messages 
          for insert with check (auth.role() = 'authenticated');
          
        create policy "messages_update" on messages 
          for update using (auth.uid() = sender_id);
          
        create policy "messages_delete" on messages 
          for delete using (auth.uid() = sender_id);
      `
    });
    
    if (messagesError) {
      console.error('Error creating messages table:', messagesError);
    } else {
      console.log('✓ Messages table created successfully');
    }
    
    console.log('Database initialization completed!');
  } catch (error) {
    console.error('Error initializing database:', error);
  }
}

// Run the initialization
initDatabase();