// Script to create the required database tables in Supabase
require('dotenv').config({ path: '.env.local' });

// Use the service role key for server-side operations
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || '';
const supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY || '';

if (!supabaseUrl || !supabaseServiceRoleKey) {
  console.error('Missing Supabase environment variables for setup');
  process.exit(1);
}

// Create a Supabase client with service role key for server-side operations
const supabaseAdmin = createClient(supabaseUrl, supabaseServiceRoleKey, {
  auth: {
    persistSession: false,
    autoRefreshToken: false,
    detectSessionInUrl: false,
  },
});

async function createTables() {
  try {
    console.log('Creating database tables...');
    
    // Check if tables already exist by attempting to query them
    console.log('Checking if tables already exist...');
    
    // Check profiles table
    try {
      const { data: profilesData, error: profilesError } = await supabaseAdmin
        .from('profiles')
        .select('id')
        .limit(1);
      
      if (profilesError && profilesError.message.includes('not found') || profilesError && profilesError.message.includes('does not exist')) {
        console.log('Profiles table does not exist, will attempt to create it');
      } else {
        console.log('‚úÖ Profiles table already exists');
      }
    } catch (error) {
      console.log('Profiles table does not exist, will attempt to create it');
    }
    
    // Check rooms table
    try {
      const { data: roomsData, error: roomsError } = await supabaseAdmin
        .from('rooms')
        .select('id')
        .limit(1);
      
      if (roomsError && roomsError.message.includes('not found') || roomsError && roomsError.message.includes('does not exist')) {
        console.log('Rooms table does not exist, will attempt to create it');
      } else {
        console.log('‚úÖ Rooms table already exists');
      }
    } catch (error) {
      console.log('Rooms table does not exist, will attempt to create it');
    }
    
    // Check messages table
    try {
      const { data: messagesData, error: messagesError } = await supabaseAdmin
        .from('messages')
        .select('id')
        .limit(1);
      
      if (messagesError && messagesError.message.includes('not found') || messagesError && messagesError.message.includes('does not exist')) {
        console.log('Messages table does not exist, will attempt to create it');
      } else {
        console.log('‚úÖ Messages table already exists');
      }
    } catch (error) {
      console.log('Messages table does not exist, will attempt to create it');
    }
    
    console.log('\nüìù IMPORTANT: Please create the required tables in your Supabase SQL editor:\n');
    console.log('1. Go to your Supabase Dashboard');
    console.log('2. Open the SQL Editor');
    console.log('3. Run the following queries one by one:\n');
    
    console.log('-- Create profiles table');
    console.log(`CREATE TABLE IF NOT EXISTS profiles (
  id UUID REFERENCES auth.users NOT NULL PRIMARY KEY,
  updated_at TIMESTAMP WITH TIME ZONE,
  username TEXT UNIQUE,
  full_name TEXT,
  avatar_url TEXT,
  website TEXT,
  CONSTRAINT username_length CHECK (CHAR_LENGTH(username) >= 3)
);

-- Set up Row Level Security (RLS)
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;

-- Policies
CREATE POLICY "Public profiles are viewable by everyone." ON profiles
  FOR SELECT USING (true);

CREATE POLICY "Users can insert their own profile." ON profiles
  FOR INSERT WITH CHECK (auth.uid() = id);

CREATE POLICY "Users can update own profile." ON profiles
  FOR UPDATE USING (auth.uid() = id);
`);
    
    console.log('-- Create rooms table');
    console.log(`CREATE TABLE IF NOT EXISTS rooms (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::TEXT, NOW()) NOT NULL,
  name TEXT NOT NULL
);

-- Set up Row Level Security (RLS)
ALTER TABLE rooms ENABLE ROW LEVEL SECURITY;

-- Policies
CREATE POLICY "Rooms are viewable by everyone." ON rooms
  FOR SELECT USING (true);
`);
    
    console.log('-- Create messages table');
    console.log(`CREATE TABLE IF NOT EXISTS messages (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::TEXT, NOW()) NOT NULL,
  room_id BIGINT REFERENCES rooms NOT NULL,
  user_id UUID REFERENCES auth.users NOT NULL,
  content TEXT NOT NULL
);

-- Set up Row Level Security (RLS)
ALTER TABLE messages ENABLE ROW LEVEL SECURITY;

-- Policies
CREATE POLICY "Messages are viewable by everyone." ON messages
  FOR SELECT USING (true);

CREATE POLICY "Authenticated users can insert messages." ON messages
  FOR INSERT WITH CHECK (auth.role() = 'authenticated');
`);
    
    console.log('\n‚úÖ After running these queries, run the seed script with: npm run seed');
    
    return { success: true };
  } catch (error) {
    console.error('Error checking database tables:', error);
    return { success: false, error: error.message };
  }
}

async function run() {
  console.log('Starting database table check process...');
  
  try {
    const result = await createTables();
    
    if (result.success) {
      console.log('\n‚úÖ Database table check completed!');
      console.log('Please follow the instructions above to create the tables if they do not exist.');
      process.exit(0);
    } else {
      console.error('‚ùå Database table check failed:', result.error);
      process.exit(1);
    }
  } catch (error) {
    console.error('‚ùå Unexpected error during database table check:', error);
    process.exit(1);
  }
}

run();