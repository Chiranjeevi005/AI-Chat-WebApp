// Script to create user_rooms table for tracking room ownership
require('dotenv').config();

const { createClient } = require('@supabase/supabase-js');

// Use the service role key for server-side operations
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || '';
const supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY || '';

if (!supabaseUrl || !supabaseServiceRoleKey) {
  console.error('Missing Supabase environment variables for setup');
  process.exit(1);
}

// Create a Supabase client with service role key for server-side operations
const supabaseAdmin = createClient(supabaseUrl, supabaseServiceRoleKey, {
  auth: {
    persistSession: false,
    autoRefreshToken: false,
    detectSessionInUrl: false,
  },
});

async function createUserRoomsTable() {
  try {
    console.log('Creating user_rooms table...');
    
    // Create the user_rooms table
    const { error } = await supabaseAdmin.rpc('exec_sql', {
      sql: `
        CREATE TABLE IF NOT EXISTS user_rooms (
          id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          user_id UUID REFERENCES auth.users NOT NULL,
          room_id BIGINT REFERENCES rooms NOT NULL,
          created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::TEXT, NOW()) NOT NULL,
          UNIQUE(user_id, room_id)
        );
        
        -- Set up Row Level Security (RLS)
        ALTER TABLE user_rooms ENABLE ROW LEVEL SECURITY;
        
        -- Policies
        CREATE POLICY "Users can view their own room associations" ON user_rooms
          FOR SELECT USING (auth.uid() = user_id);
          
        CREATE POLICY "Users can create their own room associations" ON user_rooms
          FOR INSERT WITH CHECK (auth.uid() = user_id);
          
        CREATE POLICY "Users can delete their own room associations" ON user_rooms
          FOR DELETE USING (auth.uid() = user_id);
      `
    });
    
    if (error) {
      console.error('Error creating user_rooms table:', error);
      return { success: false, error: error.message };
    }
    
    console.log('‚úÖ user_rooms table created successfully!');
    return { success: true };
  } catch (error) {
    console.error('Error creating user_rooms table:', error);
    return { success: false, error: error.message };
  }
}

async function run() {
  console.log('Starting user_rooms table creation process...');
  
  try {
    const result = await createUserRoomsTable();
    
    if (result.success) {
      console.log('\n‚úÖ User_rooms table creation completed successfully!');
      console.log('\nüìù Next steps:');
      console.log('1. Update the room creation API to associate rooms with users');
      console.log('2. Update the room fetching logic to filter by user ownership');
      console.log('3. Update the room display to show only user-specific rooms');
      process.exit(0);
    } else {
      console.error('‚ùå User_rooms table creation failed:', result.error);
      process.exit(1);
    }
  } catch (error) {
    console.error('‚ùå Unexpected error during user_rooms table creation:', error);
    process.exit(1);
  }
}

run();