-- Database schema for Chat App with Supabase

-- Create profiles table (extends Supabase auth.users)
create table if not exists profiles (
  id uuid references auth.users on delete cascade not null,
  username text unique,
  display_name text,
  avatar_url text,
  created_at timestamptz default now(),
  primary key (id)
);

-- Create rooms table
create table rooms (
  id uuid default gen_random_uuid() primary key,
  name text not null,
  created_by uuid references profiles(id),
  created_at timestamptz default now()
);

-- Create messages table
create table messages (
  id bigint generated by default as identity primary key,
  room_id uuid references rooms(id) on delete cascade,
  sender_id uuid references profiles(id),
  content text,
  created_at timestamptz default now()
);

-- Enable Row Level Security (RLS)
alter table profiles enable row level security;
alter table rooms enable row level security;
alter table messages enable row level security;

-- RLS Policies for profiles
create policy "profiles_owner" on profiles
  for insert with check (auth.uid() = id);

create policy "profiles_select" on profiles
  for select using (true);

create policy "profiles_update" on profiles
  for update using (auth.uid() = id);

-- RLS Policies for rooms
create policy "rooms_select" on rooms 
  for select using (auth.role() = 'authenticated');

create policy "rooms_insert" on rooms 
  for insert with check (auth.role() = 'authenticated');

create policy "rooms_update" on rooms 
  for update using (auth.uid() = created_by);

create policy "rooms_delete" on rooms 
  for delete using (auth.uid() = created_by);

-- RLS Policies for messages
create policy "messages_select" on messages 
  for select using (auth.role() = 'authenticated');

create policy "messages_insert" on messages 
  for insert with check (auth.role() = 'authenticated');

create policy "messages_update" on messages 
  for update using (auth.uid() = sender_id);

create policy "messages_delete" on messages 
  for delete using (auth.uid() = sender_id);