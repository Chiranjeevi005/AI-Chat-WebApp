// Script to update the database schema with missing elements
require('dotenv').config();

const { createClient } = require('@supabase/supabase-js');

// Use the service role key for server-side operations
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || '';
const supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY || '';

if (!supabaseUrl || !supabaseServiceRoleKey) {
  console.error('Missing Supabase environment variables for setup');
  process.exit(1);
}

// Create a Supabase client with service role key for server-side operations
const supabaseAdmin = createClient(supabaseUrl, supabaseServiceRoleKey, {
  auth: {
    persistSession: false,
    autoRefreshToken: false,
    detectSessionInUrl: false,
  },
});

async function updateDatabaseSchema() {
  try {
    console.log('Updating database schema with missing elements...');
    
    // Add role column to profiles table if it doesn't exist
    console.log('\n1. Adding role column to profiles table...');
    try {
      const { error: addColumnError } = await supabaseAdmin
        .rpc('execute_sql', { 
          sql: `ALTER TABLE profiles ADD COLUMN IF NOT EXISTS role TEXT DEFAULT 'user';` 
        });
      
      if (addColumnError) {
        console.log('   ‚ö†Ô∏è  Role column may already exist or error occurred:', addColumnError.message);
      } else {
        console.log('   ‚úÖ Role column added successfully (or already existed)');
      }
    } catch (err) {
      console.log('   ‚ö†Ô∏è  Error adding role column:', err.message);
    }
    
    // Create room_members table if it doesn't exist
    console.log('\n2. Creating room_members table...');
    try {
      const { error: createTableError } = await supabaseAdmin
        .rpc('execute_sql', { 
          sql: `
            CREATE TABLE IF NOT EXISTS room_members (
              id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
              room_id BIGINT REFERENCES rooms NOT NULL,
              user_id UUID REFERENCES auth.users NOT NULL,
              joined_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::TEXT, NOW()) NOT NULL,
              UNIQUE(room_id, user_id)
            );
            
            -- Set up Row Level Security (RLS)
            ALTER TABLE room_members ENABLE ROW LEVEL SECURITY;
            
            -- Policies
            CREATE POLICY "Room members are viewable by everyone." ON room_members
              FOR SELECT USING (true);
              
            CREATE POLICY "Authenticated users can join rooms." ON room_members
              FOR INSERT WITH CHECK (auth.role() = 'authenticated');
              
            CREATE POLICY "Users can leave rooms they joined." ON room_members
              FOR DELETE USING (auth.uid() = user_id);
          ` 
        });
      
      if (createTableError) {
        console.log('   ‚ö†Ô∏è  Error creating room_members table:', createTableError.message);
      } else {
        console.log('   ‚úÖ Room_members table created successfully (or already existed)');
      }
    } catch (err) {
      console.log('   ‚ö†Ô∏è  Error creating room_members table:', err.message);
    }
    
    // Add admin user if specified
    console.log('\n3. Setting up admin user...');
    const adminEmail = process.env.ADMIN_EMAIL;
    if (adminEmail) {
      console.log(`   Setting ${adminEmail} as admin...`);
      try {
        const { data: adminUser, error: adminError } = await supabaseAdmin
          .from('profiles')
          .update({ role: 'admin' })
          .eq('email', adminEmail)
          .select();
        
        if (adminError) {
          console.log('   ‚ö†Ô∏è  Error setting admin user:', adminError.message);
        } else if (adminUser && adminUser.length > 0) {
          console.log('   ‚úÖ Admin user set successfully');
        } else {
          console.log('   ‚ÑπÔ∏è  Admin user not found in database');
        }
      } catch (err) {
        console.log('   ‚ö†Ô∏è  Error setting admin user:', err.message);
      }
    } else {
      console.log('   ‚ÑπÔ∏è  No ADMIN_EMAIL specified in environment variables');
    }
    
    console.log('\nüìù To complete the setup, you may need to run these SQL commands manually in your Supabase SQL editor:');
    console.log('\n-- Add role column to profiles table');
    console.log('ALTER TABLE profiles ADD COLUMN IF NOT EXISTS role TEXT DEFAULT \'user\';');
    
    console.log('\n-- Create room_members table');
    console.log(`CREATE TABLE IF NOT EXISTS room_members (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  room_id BIGINT REFERENCES rooms NOT NULL,
  user_id UUID REFERENCES auth.users NOT NULL,
  joined_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::TEXT, NOW()) NOT NULL,
  UNIQUE(room_id, user_id)
);

-- Set up Row Level Security (RLS)
ALTER TABLE room_members ENABLE ROW LEVEL SECURITY;

-- Policies
CREATE POLICY "Room members are viewable by everyone." ON room_members
  FOR SELECT USING (true);
  
CREATE POLICY "Authenticated users can join rooms." ON room_members
  FOR INSERT WITH CHECK (auth.role() = 'authenticated');
  
CREATE POLICY "Users can leave rooms they joined." ON room_members
  FOR DELETE USING (auth.uid() = user_id);`);
    
    console.log('\n‚úÖ Database schema update completed!');
    return { success: true };
  } catch (error) {
    console.error('Error updating database schema:', error);
    return { success: false, error: error.message };
  }
}

async function run() {
  console.log('Starting database schema update process...');
  
  try {
    const result = await updateDatabaseSchema();
    
    if (result.success) {
      console.log('\n‚úÖ Database schema update completed successfully!');
      console.log('You can now restart your application to use the updated schema.');
      process.exit(0);
    } else {
      console.error('‚ùå Database schema update failed:', result.error);
      process.exit(1);
    }
  } catch (error) {
    console.error('‚ùå Unexpected error during database schema update:', error);
    process.exit(1);
  }
}

run();